{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vmNames": {
            "type": "array",
            "defaultValue": [
            ],
            "metadata": {
                "description": "Optional. Name(s) of the virtual machine(s). If no explicit names are provided, VM name(s) will be generated based on the vmNamePrefix, vmNumberOfInstances and vmInitialNumber parameters."
            }
        },
        "vmNamePrefix": {
            "type": "string",
            "metadata": {
                "description": "Optional. If no explicit values were provided in the vmNames parameter, this prefix will be used in combination with the vmNumberOfInstances and the vmInitialNumber parameters to create unique VM names. You should use a unique prefix to reduce name collisions in Active Directory. If no value is provided, a 10 character long unique string will be generated based on the Resource Group's name."
            },
            "defaultValue": "[take(toLower(uniqueString(resourceGroup().name)),10)]"
        },
        "vmNumberOfInstances": {
            "type": "int",
            "minValue": 1,
            "maxValue": 800,
            "defaultValue": 1,
            "metadata": {
                "description": "Optional. If no explicit values were provided in the vmNames parameter, this parameter will be used to generate VM names, using the vmNamePrefix and the vmInitialNumber values."
            }
        },
        "vmInitialNumber": {
            "type": "int",
            "metadata": {
                "description": "Optional. If no explicit values were provided in the vmNames parameter, this parameter will be used to generate VM names, using the vmNamePrefix and the vmNumberOfInstances values."
            },
            "defaultValue": 1
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Optional. Location for all resources."
            }
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_D2s_v3",
            "metadata": {
                "description": "Optional. Specifies the size for the VMs"
            }
        },
        "imageReference": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. OS image reference. In case of marketplace images, it's the combination of the publisher, offer, sku, version attributes. In case of custom images it's the resource ID of the custom image."
            }
        },
        "plan": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use."
            }
        },
        "osDisk": {
            "type": "object",
            "metadata": {
                "description": "Required. Specifies the OS disk."
            }
        },
        "dataDisks": {
            "type": "array",
            "defaultValue": [
            ],
            "metadata": {
                "description": "Optional. Specifies the data disks."
            }
        },
        "ultraSSDEnabled": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled."
            }
        },
        "adminUsername": {
            "type": "securestring",
            "metadata": {
                "description": "Required. Administrator username"
            }
        },
        "adminPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Required. When specifying a Windows Virtual Machine, this value should be passed"
            }
        },
        "customData": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Custom data associated to the VM, this value will be automatically converted into base64 to account for the expected VM format."
            }
        },
        "windowsConfiguration": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Specifies Windows operating system settings on the virtual machine."
            }
        },
        "linuxConfiguration": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Specifies the Linux operating system settings on the virtual machine."
            }
        },
        "certificatesToBeInstalled": {
            "type": "array",
            "defaultValue": [
            ],
            "metadata": {
                "description": "Optional. Specifies set of certificates that should be installed onto the virtual machine."
            }
        },
        "allowExtensionOperations": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Optional. Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine."
            }
        },
        "requireGuestProvisionSignal": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Specifies whether the guest provision signal is required from the virtual machine."
            }
        },
        "availabilitySetName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Creates an availability set with the given name and adds the VMs to it. Cannot be used in combination with availability zone nor scale set."
            }
        },
        "availabilitySetFaultDomain": {
            "type": "int",
            "defaultValue": 2,
            "metadata": {
                "description": "Optional. The number of fault domains to use."
            }
        },
        "availabilitySetUpdateDomain": {
            "type": "int",
            "defaultValue": 5,
            "metadata": {
                "description": "Optional. The number of update domains to use."
            }
        },
        "availabilitySetSku": {
            "type": "string",
            "defaultValue": "Aligned",
            "metadata": {
                "description": "Optional. Sku of the availability set. Use 'Aligned' for virtual machines with managed disks and 'Classic' for virtual machines with unmanaged disks."
            }
        },
        "scaleSetName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Creates a virtual machine scale set with the given name and adds the VMs to it. Cannot be used in combination with availability zone nor availability set."
            }
        },
        "scaleSetFaultDomain": {
            "type": "int",
            "defaultValue": 2,
            "metadata": {
                "description": "Optional. Fault Domain count for each placement group."
            }
        },
        "proximityPlacementGroupName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Creates an proximity placement group and adds the VMs to it."
            }
        },
        "proximityPlacementGroupType": {
            "type": "string",
            "allowedValues": [
                "Standard",
                "Ultra"
            ],
            "defaultValue": "Standard",
            "metadata": {
                "description": "Optional. Specifies the type of the proximity placement group."
            }
        },
        "useAvailabilityZone": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Creates an availability zone and adds the VMs to it. Cannot be used in combination with availability set nor scale set."
            }
        },
        "subnetId": {
            "type": "string",
            "metadata": {
                "description": "Required. Full qualified subnet Id"
            }
        },
        "vmIPAddress": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. IP address used as initial IP address. If left empty, the VM will use the next available IP"
            }
        },
        "dnsServers": {
            "type": "array",
            "defaultValue": [
            ],
            "metadata": {
                "description": "Optional. IP address list of the VM specific DNS servers. Use an empty array to use DNS settings inherited from the Virtual Network"
            }
        },
        "enablePublicIP": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Enables the creation of a Public IP and assigns it to the Network Interface."
            }
        },
        "enableIPForwarding": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Indicates whether IP forwarding is enabled on this network interface."
            }
        },
        "enableAcceleratedNetworking": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. If the network interface is accelerated networking enabled."
            }
        },
        "loadBalancerBackendPoolId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Represents a Load Balancer backend pool resource identifier, if left blank, no Load Balancer will be associated to the VMSS"
            }
        },
        "applicationSecurityGroupId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Application Security Group to associate to the Network Interface. If left empty, the Network Interface would not be associated to any Application Security Group."
            }
        },
        "vmPriority": {
            "type": "string",
            "defaultValue": "Regular",
            "allowedValues": [
                "Regular",
                "Low"
            ],
            "metadata": {
                "description": "Optional. Specifies the priority for the virtual machine."
            }
        },
        "enableEvictionPolicy": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Specifies the eviction policy for the low priority virtual machine. Will result in 'Deallocate' eviction policy."
            }
        },
        "maxPriceForLowPriorityVm": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Specifies the maximum price you are willing to pay for a low priority VM/VMSS. This price is in US Dollars."
            }
        },
        "dedicatedHostId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Specifies resource Id about the dedicated host that the virtual machine resides in."
            }
        },
        "licenseType": {
            "type": "string",
            "defaultValue": "",
            "allowedValues": [
                "Windows_Client",
                "Windows_Server",
                ""
            ],
            "metadata": {
                "description": "Optional. Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system."
            }
        },
        "enableMicrosoftAntiMalware": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Enables Microsoft Windows Defender AV."
            }
        },
        "microsoftAntiMalwareSettings": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Settings for Microsoft Windows Defender AV extension."
            }
        },
        "enableWindowsMMA-Agent": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Specifies if MMA agent for Windows VM should be enabled."
            }
        },
        "enableLinuxMMA-Agent": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Specifies if MMA agent for Linux VM should be enabled."
            }
        },
        "enableWindowsDependency-Agent": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Specifies if Azure Dependency Agent for Windows VM should be enabled. Requires WindowsMMA-Agent to be enabled."
            }
        },
        "enableLinuxDependency-Agent": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Specifies if Azure Dependency Agent for Linux VM should be enabled. Requires LinuxMMA-Agent to be enabled."
            }
        },
        "enableNetworkWatcherWindows": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Specifies if Azure Network Watcher Agent for Windows VM should be enabled."
            }
        },
        "enableNetworkWatcherLinux": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Specifies if Azure Network Watcher Agent for Linux VM should be enabled."
            }
        },
        "enableWindowsDiskEncryption": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Specifies if Windows VM disks should be encrypted. If enabled, boot diagnostics must be enabled as well."
            }
        },
        "enableServerSideEncryption": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Specifies if Windows VM disks should be encrypted with Server-side encryption + Customer managed Key."
            }
        },
        "enableLinuxDiskEncryption": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Specifies if Linux VM disks should be encrypted. If enabled, boot diagnostics must be enabled as well."
            }
        },
        "diskKeyEncryptionAlgorithm": {
            "type": "string",
            "defaultValue": "RSA-OAEP",
            "allowedValues": [
                "RSA-OAEP",
                "RSA-OAEP-256",
                "RSA1_5"
            ],
            "metadata": {
                "description": "Optional. Specifies disk key encryption algorithm."
            }
        },
        "keyEncryptionKeyURL": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. URL of the KeyEncryptionKey used to encrypt the volume encryption key"
            }
        },
        "keyVaultUri": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. URL of the Key Vault instance where the Key Encryption Key (KEK) resides"
            }
        },
        "keyVaultId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource identifier of the Key Vault instance where the Key Encryption Key (KEK) resides"
            }
        },
        "diskEncryptionVolumeType": {
            "type": "string",
            "defaultValue": "All",
            "allowedValues": [
                "OS",
                "Data",
                "All"
            ],
            "metadata": {
                "description": "Optional. Type of the volume OS or Data to perform encryption operation"
            }
        },
        "forceUpdateTag": {
            "type": "string",
            "defaultValue": "1.0",
            "metadata": {
                "description": "Optional. Pass in an unique value like a GUID everytime the operation needs to be force run"
            }
        },
        "resizeOSDisk": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Should the OS partition be resized to occupy full OS VHD before splitting system volume"
            }
        },
        "windowsScriptExtensionFileData": {
            "type": "array",
            "defaultValue": [
            ],
            "metadata": {
                "description": "Optional. Array of objects that specifies URIs and the storageAccountId of the scripts that need to be downloaded and run by the Custom Script Extension on a Windows VM."
            }
        },
        "windowsScriptExtensionCommandToExecute": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Specifies the command that should be run on a Windows VM."
            }
        },
        "backupVaultName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Recovery service vault name to add VMs to backup."
            }
        },
        "backupVaultResourceGroup": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource group of the backup recovery service vault."
            }
        },
        "backupPolicyName": {
            "type": "string",
            "defaultValue": "DefaultPolicy",
            "metadata": {
                "description": "Optional. Backup policy the VMs should be using for backup."
            }
        },
        "domainName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Specifies the FQDN the of the domain the VM will be joined to. Currently implemented for Windows VMs only"
            }
        },
        "domainJoinUser": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Mandatory if domainName is specified. User used for the join to the domain. Format: username@domainFQDN"
            }
        },
        "domainJoinOU": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Specifies an organizational unit (OU) for the domain account. Enter the full distinguished name of the OU in quotation marks. Example: \"OU=testOU; DC=domain; DC=Domain; DC=com\""
            }
        },
        "domainJoinPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Optional. Required if domainName is specified. Password of the user specified in domainJoinUser parameter"
            }
        },
        "domainJoinRestart": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Controls the restart of vm after executing domain join"
            }
        },
        "domainJoinOptions": {
            "type": "int",
            "defaultValue": 3,
            "metadata": {
                "description": "Optional. Set of bit flags that define the join options. Default value of 3 is a combination of NETSETUP_JOIN_DOMAIN (0x00000001) & NETSETUP_ACCT_CREATE (0x00000002) i.e. will join the domain and create the account on the domain. For more information see https://msdn.microsoft.com/en-us/library/aa392154(v=vs.85).aspx"
            }
        },
        "dscConfiguration": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. The DSC configuration object"
            }
        },
        "enableBootDiagnostics": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Whether boot diagnostics should be enabled on the Virtual Machine."
            }
        },
        "bootDiagnosticStorageAccountName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Storage account used to store boot diagnostic information."
            }
        },
        "diagnosticLogsRetentionInDays": {
            "type": "int",
            "defaultValue": 365,
            "minValue": 0,
            "maxValue": 365,
            "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
            }
        },
        "diagnosticStorageAccountId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource identifier of the Diagnostic Storage Account."
            }
        },
        "workspaceId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource identifier of Log Analytics."
            }
        },
        "eventHubAuthorizationRuleId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
            }
        },
        "eventHubName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
            }
        },
        "lockForDeletion": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Switch to lock VM from deletion."
            }
        },
        "tags": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Tags of the resource."
            }
        },
        "cuaId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Customer Usage Attribution id (GUID). This GUID must be previously registered"
            }
        },
        "baseTime": {
            "type": "string",
            "defaultValue": "[utcNow('u')]",
            "metadata": {
                "description": "Generated. Do not provide a value! This date value is used to generate a registration token."
            }
        },
        "sasTokenValidityLength": {
            "defaultValue": "PT8H",
            "type": "string",
            "metadata": {
                "description": "Optional. SAS token validity length to use to download files from storage accounts. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the SAS token will be valid for 8 hours."
            }
        }
    },
    "variables": {
        "dnsServersValues": {
            "dnsServers": "[parameters('dnsServers')]"
        },
        "allZones": {
            "copy": [
                {
                    "name": "zones",
                    "count": "[length(variables('vmNames'))]",
                    "input": "[string(add(mod(copyIndex('zones'), 3), 1))]"
                }
            ]
        },
        "diagnosticsMetrics": [
            {
                "category": "AllMetrics",
                "timeGrain": null,
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            }
        ],
        "pipDiagnosticsLogs": [
            {
                "category": "DDoSProtectionNotifications",
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            },
            {
                "category": "DDoSMitigationFlowLogs",
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            },
            {
                "category": "DDoSMitigationReports",
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            }
        ],
        "pidName": "[concat('pid-', parameters('cuaId'))]",
        "bootDiagnosticStorageAccountName": "[if(empty(parameters('bootDiagnosticStorageAccountName')), split(parameters('diagnosticStorageAccountId'), '/')[sub(length(split(parameters('diagnosticStorageAccountId'), '/')), 1)], parameters('bootDiagnosticStorageAccountName'))]",
        "copy": [
            {
                "name": "vmGeneratedNames",
                "count": "[parameters('vmNumberOfInstances')]",
                "input": "[concat(parameters('vmNamePrefix'), padLeft( copyIndex('vmGeneratedNames', parameters('vmInitialNumber') ),3,'0' ) )]"
            }
        ],
        "vmNames": "[if( empty( parameters('vmNames') ), variables('vmGeneratedNames'), parameters('vmNames') )]",
        "accountSasProperties": {
            "signedServices": "b", //Blob (b), Queue (q), Table (t), File (f).
            "signedPermission": "r", //Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p)
            "signedExpiry": "[dateTimeAdd(parameters('baseTime'), parameters('sasTokenValidityLength'))]", //format: 2017-05-24T10:42:03Z
            "signedResourceTypes": "o", //Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files.
            "signedProtocol": "https"
        }
    },
    "resources": [
        {
            "condition": "[not(empty(parameters('cuaId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-02-01",
            "name": "[variables('pidName')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2019-09-01",
            "name": "[concat(variables('vmNames')[copyIndex()], '-pip-01')]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "condition": "[parameters('enablePublicIP')]",
            "copy": {
                "name": "pipLoop",
                "count": "[length(variables('vmNames'))]"
            },
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            },
            "zones": "[if(parameters('useAvailabilityZone'), array(variables('allZones').zones[copyIndex()]), json('null'))]",
            "resources": [
                {
                    "type": "providers/locks",
                    "apiVersion": "2016-09-01",
                    "condition": "[parameters('lockForDeletion')]",
                    "name": "Microsoft.Authorization/publicIpDoNotDelete",
                    "dependsOn": [
                        "[concat('Microsoft.Network/publicIPAddresses/', variables('vmNames')[copyIndex()], '-pip-01')]"
                    ],
                    "comments": "Resource lock on Public IP",
                    "properties": {
                        "level": "CannotDelete"
                    }
                },
                {

                    "type": "Microsoft.Network/publicIPAddresses/providers/diagnosticSettings",
                    "apiVersion": "2017-05-01-preview",
                    "location": "[parameters('location')]",
                    "tags": "[parameters('tags')]",
                    "condition": "[and(parameters('enablePublicIP'), or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName')))))]",
                    "name": "[concat(variables('vmNames')[copyIndex()], '-pip-01', '/Microsoft.Insights/service')]",
                    "dependsOn": [
                        "[concat('Microsoft.Network/publicIPAddresses/', variables('vmNames')[copyIndex()], '-pip-01')]"
                    ],
                    "properties": {
                        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
                        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
                        "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
                        "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
                        "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsMetrics'))]",
                        "logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('pipDiagnosticsLogs'))]"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "copy": {
                "name": "nicLoop",
                "count": "[length(variables('vmNames'))]"
            },
            "dependsOn": [
                "pipLoop"
            ],
            "name": "[concat(variables('vmNames')[copyIndex()], '-nic-int-01')]",
            "properties": {
                "enableIPForwarding": "[parameters('enableIPForwarding')]",
                "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "[if(empty(parameters('vmIPAddress')), 'Dynamic', 'Static')]",
                            "publicIPAddress": "[if(not(parameters('enablePublicIP')), json('null'), json(concat('{\"id\":\"', resourceId('Microsoft.Network/publicIPAddresses', concat(variables('vmNames')[copyIndex()], '-pip-01')),'\"}')))]",
                            "privateIPAddress": "[if(empty(parameters('vmIPAddress')), json('null'), vdc.nextIP(parameters('vmIPAddress'), copyIndex()))]",
                            "subnet": {
                                "id": "[parameters('subnetId')]"
                            },
                            "loadBalancerBackendAddressPools": "[if(empty(parameters('loadBalancerBackendPoolId')), json('null'), parameters('loadBalancerBackendPoolId'))]",
                            "applicationSecurityGroups": "[if(empty(parameters('applicationSecurityGroupId')), json('null'), parameters('applicationSecurityGroupId'))]"
                        }
                    }
                ],
                "dnsSettings": "[if(equals(length(parameters('dnsServers')),0), json('null'), variables('dnsServersValues'))]"
            },
            "resources": [
                {
                    "type": "providers/locks",
                    "apiVersion": "2016-09-01",
                    "condition": "[parameters('lockForDeletion')]",
                    "name": "Microsoft.Authorization/networkInterfaceDoNotDelete",
                    "dependsOn": [
                        "[concat('Microsoft.Network/networkInterfaces/', variables('vmNames')[copyIndex()], '-nic-int-01')]"
                    ],
                    "comments": "Resource lock on Network Interface",
                    "properties": {
                        "level": "CannotDelete"
                    }
                },
                {
                    "type": "Microsoft.Network/networkInterfaces/providers/diagnosticSettings",
                    "apiVersion": "2017-05-01-preview",
                    "location": "[parameters('location')]",
                    "tags": "[parameters('tags')]",
                    "name": "[concat(variables('vmNames')[copyIndex()], '-nic-int-01', '/Microsoft.Insights/service')]",
                    "condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
                    "dependsOn": [
                        "[concat('Microsoft.Network/networkInterfaces/', variables('vmNames')[copyIndex()], '-nic-int-01')]"
                    ],
                    "properties": {
                        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
                        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
                        "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
                        "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
                        "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsMetrics'))]"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "apiVersion": "2019-07-01",
            "condition": "[not(empty(parameters('availabilitySetName')))]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "name": "[if(not(empty(parameters('availabilitySetName'))),parameters('availabilitySetName'),'dummyAvailabilitySet')]",
            "dependsOn": [
                "[if(not(empty(parameters('proximityPlacementGroupName'))),parameters('proximityPlacementGroupName'),'dummyProximityGroup')]"
            ],
            "properties": {
                "platformFaultDomainCount": "[parameters('availabilitySetFaultDomain')]",
                "platformUpdateDomainCount": "[parameters('availabilitySetUpdateDomain')]",
                "proximityPlacementGroup": "[if(empty(parameters('proximityPlacementGroupName')), json('null'), json(concat('{\"id\":\"', resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('proximityPlacementGroupName')),'\"}')))]"
            },
            "sku": {
                "name": "[parameters('availabilitySetSku')]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "apiVersion": "2019-07-01",
            "condition": "[not(empty(parameters('scaleSetName')))]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "name": "[if(not(empty(parameters('scaleSetName'))),parameters('scaleSetName'),'dummyScaleSet')]",
            "dependsOn": [
                "[if(not(empty(parameters('proximityPlacementGroupName'))),parameters('proximityPlacementGroupName'),'dummyProximityGroup')]"
            ],
            "properties": {
                "platformFaultDomainCount": "[parameters('scaleSetFaultDomain')]",
                "singlePlacementGroup": true,
                "proximityPlacementGroup": "[if(empty(parameters('proximityPlacementGroupName')), json('null'), json(concat('{\"id\":\"', resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('proximityPlacementGroupName')),'\"}')))]"
            }
        },
        {
            "type": "Microsoft.Compute/proximityPlacementGroups",
            "apiVersion": "2019-07-01",
            "condition": "[not(empty(parameters('proximityPlacementGroupName')))]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "name": "[if(not(empty(parameters('proximityPlacementGroupName'))),parameters('proximityPlacementGroupName'),'dummyProximityGroup')]",
            "properties": {
                "proximityPlacementGroupType": "[parameters('proximityPlacementGroupType')]"
            }
        },
        {
            "name": "[variables('vmNames')[copyIndex()]]",
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-07-01",
            "location": "[parameters('location')]",
            "copy": {
                "name": "vmLoop",
                "count": "[length(variables('vmNames'))]"
            },
            "tags": "[parameters('tags')]",
            "dependsOn": [
                "nicLoop",
                "[if(not(empty(parameters('availabilitySetName'))),parameters('availabilitySetName'),'dummyAvailabilitySet')]",
                "[if(not(empty(parameters('scaleSetName'))),parameters('scaleSetName'),'dummyScaleSet')]",
                "[if(not(empty(parameters('proximityPlacementGroupName'))),parameters('proximityPlacementGroupName'),'dummyProximityGroup')]"
            ],
            "zones": "[if(parameters('useAvailabilityZone'), array(variables('allZones').zones[copyIndex()]), json('null'))]",
            "plan": "[if(empty(parameters('plan')), json('null'),parameters('plan'))]",
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                    "imageReference": "[parameters('imageReference')]",
                    "osDisk": {
                        "name": "[concat(variables('vmNames')[copyIndex()], '-disk-os-01')]",
                        "createOption": "[parameters('osDisk').createOption]",
                        "diskSizeGB": "[parameters('osDisk').diskSizeGB]",
                        "managedDisk": {
                            "storageAccountType": "[parameters('osDisk').managedDisk.storageAccountType]"
                        }
                    },
                    "copy": [
                        {
                            "name": "dataDisks",
                            "count": "[length(parameters('dataDisks'))]",
                            "input": {
                                "lun": "[copyIndex('dataDisks')]",
                                "name": "[concat(variables('vmNames')[copyIndex('vmLoop')], '-disk-data-', padLeft(copyIndex('dataDisks',1),2,'0'))]",
                                "diskSizeGB": "[parameters('dataDisks')[copyIndex('dataDisks')].diskSizeGB]",
                                "createOption": "[parameters('dataDisks')[copyIndex('dataDisks')].createOption]",
                                "caching": "[parameters('dataDisks')[copyIndex('dataDisks')].caching]",
                                "managedDisk": {
                                    "storageAccountType": "[parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.storageAccountType]",
                                    "diskEncryptionSet": {
                                        "id": "[if(parameters('enableServerSideEncryption'), parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.diskEncryptionSet.id, json('null'))]"
                                    }
                                }
                            }
                        }
                    ]
                },
                "additionalCapabilities": {
                    "ultraSSDEnabled": "[parameters('ultraSSDEnabled')]"
                },
                "osProfile": {
                    "computerName": "[variables('vmNames')[copyIndex()]]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "customData": "[if(empty(parameters('customData')), json('null'), base64(parameters('customData')))]",
                    "windowsConfiguration": "[if(empty(parameters('windowsConfiguration')), json('null'),parameters('windowsConfiguration'))]",
                    "linuxConfiguration": "[if(empty(parameters('linuxConfiguration')), json('null'),parameters('linuxConfiguration'))]",
                    "secrets": "[parameters('certificatesToBeInstalled')]",
                    "allowExtensionOperations": "[parameters('allowExtensionOperations')]"
                    //"requireGuestProvisionSignal": "[parameters('requireGuestProvisionSignal')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('vmNames')[copyIndex()], '-nic-int-01'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "[parameters('enableBootDiagnostics')]",
                        "storageUri": "[concat('https://', if(empty(variables('bootDiagnosticStorageAccountName')), 'dummy', variables('bootDiagnosticStorageAccountName')), '.blob.core.windows.net/')]"
                    }
                },
                "availabilitySet": "[if(not(empty(parameters('availabilitySetName'))), json(concat('{\"id\":\"', resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')),'\"}')), json('null'))]",
                "virtualMachineScaleSet": "[if(not(empty(parameters('scaleSetName'))), json(concat('{\"id\":\"',resourceId('Microsoft.Compute/virtualMachineScaleSets', parameters('scaleSetName')),'\"}')), json('null'))]",
                "proximityPlacementGroup": "[if(empty(parameters('proximityPlacementGroupName')), json('null'), json(concat('{\"id\":\"', resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('proximityPlacementGroupName')),'\"}')))]",
                "priority": "[parameters('vmPriority')]",
                "evictionPolicy": "[if(parameters('enableEvictionPolicy'), 'Deallocate', json('null'))]",
                "billingProfile": "[if(and(not(empty(parameters('vmPriority'))),not(empty(parameters('maxPriceForLowPriorityVm')))), json(concat('{\"maxPrice\":\"',parameters('maxPriceForLowPriorityVm'),'\"}')), json('null'))]",
                "host": "[if(not(empty(parameters('dedicatedHostId'))), json(concat('{\"id\":\"',parameters('dedicatedHostId'),'\"}')), json('null'))]",
                "licenseType": "[if(empty(parameters('licenseType')), json('null'),parameters('licenseType'))]"
            },
            "resources": [
                {
                    "type": "providers/locks",
                    "apiVersion": "2016-09-01",
                    "condition": "[parameters('lockForDeletion')]",
                    "name": "Microsoft.Authorization/vmDoNotDelete",
                    "dependsOn": [
                        "[concat('Microsoft.Compute/virtualMachines/', variables('vmNames')[copyIndex()])]"
                    ],
                    "comments": "Resource lock on Azure Key Vault",
                    "properties": {
                        "level": "CannotDelete"
                    }
                },
                {
                    "type": "Microsoft.Compute/virtualMachines/extensions",
                    "name": "[concat(variables('vmNames')[copyIndex()],'/DomainJoin')]",
                    "apiVersion": "2019-07-01",
                    "location": "[parameters('location')]",
                    "condition": "[not(empty(parameters('domainName')))]",
                    "dependsOn": [
                        "[concat('Microsoft.Compute/virtualMachines/', variables('vmNames')[copyIndex()])]"
                    ],
                    "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                            "Name": "[parameters('domainName')]",
                            "User": "[parameters('domainJoinUser')]",
                            "OUPath": "[parameters('domainJoinOU')]",
                            "Restart": "[parameters('domainJoinRestart')]",
                            "Options": "[parameters('domainJoinOptions')]"
                        },
                        "protectedSettings": {
                            "Password": "[parameters('domainJoinPassword')]"
                        }
                    }
                },
                {
                    "type": "Microsoft.Compute/virtualMachines/extensions",
                    "name": "[concat(variables('vmNames')[copyIndex()], '/MicrosoftAntiMalware')]",
                    "apiVersion": "2019-07-01",
                    "location": "[parameters('location')]",
                    "condition": "[parameters('enableMicrosoftAntiMalware')]",
                    "dependsOn": [
                        "[concat('Microsoft.Compute/virtualMachines/', variables('vmNames')[copyIndex()])]",
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('vmNames')[copyIndex()], 'DomainJoin')]"
                    ],
                    "properties": {
                        "publisher": "Microsoft.Azure.Security",
                        "type": "IaaSAntimalware",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": "[parameters('microsoftAntiMalwareSettings')]"
                    }
                },
                {
                    "type": "Microsoft.Compute/virtualMachines/extensions",
                    "name": "[concat(variables('vmNames')[copyIndex()], '/WindowsMMA-Agent')]",
                    "apiVersion": "2019-07-01",
                    "location": "[parameters('location')]",
                    "condition": "[parameters('enableWindowsMMA-Agent')]",
                    "dependsOn": [
                        "[concat('Microsoft.Compute/virtualMachines/', variables('vmNames')[copyIndex()])]",
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('vmNames')[copyIndex()], 'MicrosoftAntiMalware')]"
                    ],
                    "properties": {
                        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                        "type": "MicrosoftMonitoringAgent",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                            "workspaceId": "[if(empty(parameters('workspaceId')), 'dummy', reference(parameters('workspaceId'), '2015-11-01-preview').customerId)]"
                        },
                        "protectedSettings": {
                            "workspaceKey": "[if(empty(parameters('workspaceId')), 'dummy', listKeys(parameters('workspaceId'), '2015-11-01-preview').primarySharedKey)]"
                        }
                    }
                },
                {
                    "type": "Microsoft.Compute/virtualMachines/extensions",
                    "name": "[concat(variables('vmNames')[copyIndex()], '/LinuxMMA-Agent')]",
                    "apiVersion": "2019-07-01",
                    "location": "[parameters('location')]",
                    "condition": "[parameters('enableLinuxMMA-Agent')]",
                    "dependsOn": [
                        "[concat('Microsoft.Compute/virtualMachines/', variables('vmNames')[copyIndex()])]",
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('vmNames')[copyIndex()], 'WindowsMMA-Agent')]"
                    ],
                    "properties": {
                        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                        "type": "OmsAgentForLinux",
                        "typeHandlerVersion": "1.7",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                            "workspaceId": "[if(empty(parameters('workspaceId')), 'dummy', reference(parameters('workspaceId'), '2015-11-01-preview').customerId)]"
                        },
                        "protectedSettings": {
                            "workspaceKey": "[if(empty(parameters('workspaceId')), 'dummy', listKeys(parameters('workspaceId'), '2015-11-01-preview').primarySharedKey)]"
                        }
                    }
                },
                {
                    "type": "Microsoft.Compute/virtualMachines/extensions",
                    "name": "[concat(variables('vmNames')[copyIndex()], '/WindowsDiskEncryption')]",
                    "apiVersion": "2019-07-01",
                    "location": "[parameters('location')]",
                    "condition": "[parameters('enableWindowsDiskEncryption')]",
                    "dependsOn": [
                        "[concat('Microsoft.Compute/virtualMachines/', variables('vmNames')[copyIndex()])]",
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('vmNames')[copyIndex()], 'LinuxMMA-Agent')]"
                    ],
                    "properties": {
                        "publisher": "Microsoft.Azure.Security",
                        "type": "AzureDiskEncryption",
                        "typeHandlerVersion": "2.2",
                        "autoUpgradeMinorVersion": true,
                        "forceUpdateTag": "[parameters('forceUpdateTag')]",
                        "settings": {
                            "EncryptionOperation": "EnableEncryption",
                            "KeyVaultURL": "[parameters('keyVaultUri')]",
                            "KeyVaultResourceId": "[parameters('keyVaultId')]",
                            "KeyEncryptionKeyURL": "[parameters('keyEncryptionKeyURL')]",
                            "KekVaultResourceId": "[parameters('keyVaultId')]",
                            "KeyEncryptionAlgorithm": "[parameters('diskKeyEncryptionAlgorithm')]",
                            "VolumeType": "[parameters('diskEncryptionVolumeType')]",
                            "ResizeOSDisk": "[parameters('resizeOSDisk')]"
                        }
                    }
                },
                {
                    "type": "Microsoft.Compute/virtualMachines/extensions",
                    "name": "[concat(variables('vmNames')[copyIndex()], '/LinuxDiskEncryption')]",
                    "apiVersion": "2019-07-01",
                    "location": "[parameters('location')]",
                    "condition": "[parameters('enableLinuxDiskEncryption')]",
                    "dependsOn": [
                        "[concat('Microsoft.Compute/virtualMachines/', variables('vmNames')[copyIndex()])]",
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('vmNames')[copyIndex()], 'WindowsDiskEncryption')]"
                    ],
                    "properties": {
                        "publisher": "Microsoft.Azure.Security",
                        "type": "AzureDiskEncryptionForLinux",
                        "typeHandlerVersion": "1.1",
                        "autoUpgradeMinorVersion": true,
                        "forceUpdateTag": "[parameters('forceUpdateTag')]",
                        "settings": {
                            "EncryptionOperation": "EnableEncryption",
                            "KeyVaultURL": "[parameters('keyVaultUri')]",
                            "KeyVaultResourceId": "[parameters('keyVaultId')]",
                            "KeyEncryptionKeyURL": "[parameters('keyEncryptionKeyURL')]",
                            "KekVaultResourceId": "[parameters('keyVaultId')]",
                            "KeyEncryptionAlgorithm": "[parameters('diskKeyEncryptionAlgorithm')]",
                            "VolumeType": "[parameters('diskEncryptionVolumeType')]"
                        }
                    }
                },
                {
                    "type": "Microsoft.Compute/virtualMachines/extensions",
                    "apiVersion": "2019-07-01",
                    "name": "[concat(variables('vmNames')[copyIndex()], '/DependencyAgentWindows')]",
                    "location": "[parameters('location')]",
                    "condition": "[parameters('enableWindowsDependency-Agent')]",
                    "dependsOn": [
                        "[concat('Microsoft.Compute/virtualMachines/', variables('vmNames')[copyIndex()])]",
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('vmNames')[copyIndex()], 'WindowsCustomScriptExtension')]"
                    ],
                    "properties": {
                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                        "type": "DependencyAgentWindows",
                        "typeHandlerVersion": "9.5",
                        "autoUpgradeMinorVersion": true
                    }
                },
                {
                    "type": "Microsoft.Compute/virtualMachines/extensions",
                    "apiVersion": "2019-07-01",
                    "name": "[concat(variables('vmNames')[copyIndex()], '/DependencyAgentLinux')]",
                    "location": "[parameters('location')]",
                    "condition": "[parameters('enableLinuxDependency-Agent')]",
                    "dependsOn": [
                        "[concat('Microsoft.Compute/virtualMachines/', variables('vmNames')[copyIndex()])]",
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('vmNames')[copyIndex()], 'DependencyAgentWindows')]"
                    ],
                    "properties": {
                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                        "type": "DependencyAgentLinux",
                        "typeHandlerVersion": "9.5",
                        "autoUpgradeMinorVersion": true
                    }
                },
                {
                    "type": "Microsoft.Compute/virtualMachines/extensions",
                    "name": "[concat(variables('vmNames')[copyIndex()], '/NetworkWatcherAgentWindows')]",
                    "apiVersion": "2019-07-01",
                    "location": "[parameters('location')]",
                    "condition": "[parameters('enableNetworkWatcherWindows')]",
                    "dependsOn": [
                        "[concat('Microsoft.Compute/virtualMachines/', variables('vmNames')[copyIndex()])]",
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('vmNames')[copyIndex()], 'DependencyAgentLinux')]"
                    ],
                    "properties": {
                        "publisher": "Microsoft.Azure.NetworkWatcher",
                        "type": "NetworkWatcherAgentWindows",
                        "typeHandlerVersion": "1.4",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                        }
                    }
                },
                {
                    "type": "Microsoft.Compute/virtualMachines/extensions",
                    "name": "[concat(variables('vmNames')[copyIndex()], '/NetworkWatcherAgentLinux')]",
                    "apiVersion": "2019-07-01",
                    "location": "[parameters('location')]",
                    "condition": "[parameters('enableNetworkWatcherLinux')]",
                    "dependsOn": [
                        "[concat('Microsoft.Compute/virtualMachines/', variables('vmNames')[copyIndex()])]",
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('vmNames')[copyIndex()], 'NetworkWatcherAgentWindows')]"
                    ],
                    "properties": {
                        "publisher": "Microsoft.Azure.NetworkWatcher",
                        "type": "NetworkWatcherAgentLinux",
                        "typeHandlerVersion": "1.4",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                        }
                    }
                },
                {
                    "type": "Microsoft.Compute/virtualMachines/extensions",
                    "name": "[concat(variables('vmNames')[copyIndex()], '/windowsDsc')]",
                    "apiVersion": "2018-10-01",
                    "location": "[parameters('location')]",
                    "condition": "[not(empty(parameters('dscConfiguration')))]",
                    "dependsOn": [
                        "[concat('Microsoft.Compute/virtualMachines/', variables('vmNames')[copyIndex()])]",
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('vmNames')[copyIndex()], 'NetworkWatcherAgentLinux')]"
                    ],
                    "properties": {
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "autoUpgradeMinorVersion": true,
                        "settings": "[parameters('dscConfiguration').settings]",
                        "protectedSettings": "[if( contains(parameters('dscConfiguration'), 'protectedSettings'), parameters('dscConfiguration').protectedSettings, json('null') )]"
                    }
                }
            ]
        },
        // This WindowsCustomScriptExtension has to be a top level resource, as the 'fileUris' propert copy loop only works if this extension is not a nested resource within the VM.
        {
            "apiVersion": "2019-07-01",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmNames')[copyIndex()], '/WindowsCustomScriptExtension')]",
            "location": "[parameters('location')]",
            "condition": "[and(not(empty(parameters('windowsScriptExtensionFileData'))),not(empty(parameters('windowsScriptExtensionCommandToExecute'))))]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmNames')[copyIndex()])]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('vmNames')[copyIndex()], 'LinuxDiskEncryption')]"
            ],
            "copy": {
                "name": "windowsCustomScriptExtensionLoop",
                "count": "[length(variables('vmNames'))]"
            },
            "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.9",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "copy": [
                        {
                            "name": "fileUris",
                            "count": "[length(parameters('windowsScriptExtensionFileData'))]",
                            "input": "[concat(parameters('windowsScriptExtensionFileData')[copyIndex('fileUris')].uri, if( not(empty(parameters('windowsScriptExtensionFileData')[copyIndex('fileUris')].storageAccountId)), concat('?',listAccountSas(parameters('windowsScriptExtensionFileData')[copyIndex('fileUris')].storageAccountId, '2019-04-01', variables('accountSasProperties')).accountSasToken) , '' ))]"
                        }
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[parameters('windowsScriptExtensionCommandToExecute')]"
                }
            }
        },
        {
            "name": "[concat('add', variables('vmNames')[copyIndex()], 'ToBackup')]",
            "condition": "[not(empty(parameters('backupVaultName')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-08-01",
            "copy": {
                "name": "backupLoop",
                "count": "[length(variables('vmNames'))]"
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmNames')[copyIndex()])]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('vmNames')[copyIndex()], 'NetworkWatcherAgentLinux')]"
            ],
            "resourceGroup": "[parameters('backupVaultResourceGroup')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "apiVersion": "2016-12-01",
                            "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                            "name": "[concat(parameters('backupVaultName'), '/Azure/iaasvmcontainer;iaasvmcontainerv2;', resourceGroup().name, ';', variables('vmNames')[copyIndex()], '/vm;iaasvmcontainerv2;', resourceGroup().name, ';', variables('vmNames')[copyIndex()])]",
                            "properties": {
                                "protectedItemType": "Microsoft.Compute/virtualMachines",
                                "policyId": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('backupVaultName'), parameters('backupPolicyName'))]",
                                "sourceResourceId": "[resourceId('Microsoft.Compute/virtualMachines/', variables('vmNames')[copyIndex()])]"
                            }
                        }
                    ]
                }
            }
        }
    ],
    "functions": [
        {
            "namespace": "vdc",
            "members": {
                "nextIP": {
                    "parameters": [
                        {
                            "name": "ip",
                            "type": "string"
                        },
                        {
                            "name": "operand",
                            "type": "int"
                        }
                    ],
                    "output": {
                        "type": "string",
                        "value": "[concat(split(parameters('ip'), '.')[0], '.' ,split(parameters('ip'), '.')[1], '.' ,split(parameters('ip'), '.')[2], '.', add(int(split(parameters('ip'), '.')[3]), parameters('operand')))]"
                    }
                }
            }
        }
    ],
    "outputs": {
        "vmResourceIds": {
            "type": "array",
            "copy": {
                "count": "[length(variables('vmNames'))]",
                "input": "[resourceId('Microsoft.Compute/virtualMachines', variables('vmNames')[copyIndex()])]"
            },
            "metadata": {
                "description": "The Resource Id(s) of the VM(s)."
            }
        },
        "vmResourceGroup": {
            "type": "string",
            "value": "[resourceGroup().name]",
            "metadata": {
                "description": "The name of the Resource Group the VM(s) was/were created in."
            }
        },
        "vmNames": {
            "type": "array",
            "value": "[variables('vmNames')]",
            "metadata": {
                "description": "The Names of the VMs."
            }
        }
    }
}