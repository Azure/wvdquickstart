jobs:
- job:
  displayName: Post Deployment
  pool:
    ${{ if eq(variables['vmImage'], '') }}:
      name: $(poolName)
    ${{ if eq(variables['poolName'], '') }}:
      vmImage: $(vmImage)
  steps:
    - task: AzurePowerShell@4
      enabled: true
      displayName: Initialize data disks of all VMs (Windows) in ${{ parameters.resourceGroupName }}
      inputs:
        azureSubscription: $(serviceConnection)
        ScriptType: InlineScript
        azurePowerShellVersion: LatestVersion
        Inline: |
          $vms = Get-AzVM -ResourceGroupName ${{ parameters.resourceGroupName }}
          $scriptLocation = "${{ parameters.modulePath }}/Scripts/InitializeDisksWindows.ps1"
          foreach ($vm in $vms) {
            Invoke-AzVMRunCommand -ResourceGroupName ${{ parameters.resourceGroupName }} -Name $vm.Name -CommandId 'RunPowerShellScript' -ScriptPath "$(Build.Repository.LocalPath)/$scriptLocation"
          }
    - task: AzurePowerShell@4
      enabled: true
      displayName: Encrypt all VMs in ${{ parameters.resourceGroupName }}
      inputs:
        azureSubscription: $(serviceConnection)
        ScriptType: InlineScript
        azurePowerShellVersion: LatestVersion
        Inline: |
          $vms = Get-AzVM -ResourceGroupName ${{ parameters.resourceGroupName }}
          $keyVault = Get-AzKeyVault -VaultName $(diskEncryptionKeyVault) -ResourceGroupName ${{ parameters.resourceGroupName }}
          foreach ($vm in $vms) {
            Set-AzVMDiskEncryptionExtension -ResourceGroupName ${{ parameters.resourceGroupName }} -VMName $vm.Name -DiskEncryptionKeyVaultUrl $keyVault.VaultUri -DiskEncryptionKeyVaultId $keyVault.ResourceId -SkipVmBackup -VolumeType All -Force
          }