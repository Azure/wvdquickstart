parameters:
  moduleName: ''
  resourceGroupName: ''
  modulePath: ''
  parameterFilePaths: ''
  location: '$(location)'

jobs:
- job:
  displayName: Validate Module
  pool:
    ${{ if eq(variables['vmImage'], '') }}:
      name: $(poolName)
    ${{ if eq(variables['poolName'], '') }}:
      vmImage: $(vmImage)
  steps:
  - task: PowerShell@2
    displayName: Test Module [${{ parameters.moduleName }}] via (Pester)
    inputs:
      targetType: inline
      script: |
        Install-Module Pester -Force -ErrorAction Stop -RequiredVersion 5.0.1 
      
        $PesterSettings  = @{
          Path       = "$(System.DefaultWorkingDirectory)/${{ parameters.modulePath }}/Tests/*.tests.ps1"
          Output     = "Detailed"
          CI         = $true
          Verbose    = $true
        }
        Invoke-Pester @PesterSettings
        
  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testResultsFormat: NUnit
      testResultsFiles: testResults.xml

  - ${{ each parameterFilePath in parameters.parameterFilePaths }}:
    - task: AzurePowerShell@4
      displayName: 'Validate [${{ parameters.moduleName }}] using parameter file [${{ parameterFilePath }}] via connection [$(serviceconnection)]'
      inputs:
        azureSubscription: $(serviceConnection)
        ScriptType: InlineScript
        azurePowerShellVersion: LatestVersion
        inline: |
          $templateFilePath = "$(Build.Repository.LocalPath)/${{ parameters.modulePath }}/deploy.json"
          $DeploymentInputs = @{
            TemplateFile          = $templateFilePath
            TemplateParameterFile = "$(Build.Repository.LocalPath)/${{ parameterFilePath }}"
            Verbose               = $true
            OutVariable           = "ValidationErrors"
          }
          $ValidationErrors = $null
          $deploymentSchema = (ConvertFrom-Json (Get-Content -Raw -Path $templateFilePath)).'$schema'
          switch -regex ($deploymentSchema) {
              '\/deploymentTemplate.json#$' {
                Write-Verbose 'Handling resource group level validation' -Verbose
                if (-not (Get-AzResourceGroup -Name '${{ parameters.resourceGroupName }}' -ErrorAction SilentlyContinue)) {
                  Write-Warning 'Deploying resource group [${{ parameters.resourceGroupName }}]'
                  New-AzResourceGroup -Name '${{ parameters.resourceGroupName }}' -Location '${{ parameters.location }}'
                }
                Test-AzResourceGroupDeployment @DeploymentInputs -ResourceGroupName "${{ parameters.resourceGroupName }}"
                break
              }
              '\/subscriptionDeploymentTemplate.json#$' {
                $DeploymentInputs += @{
                  Location = '${{ parameters.location }}'
                }
                Write-Verbose 'Handling subscription level validation' -Verbose
                Test-AzSubscriptionDeployment @DeploymentInputs
                break
              }
              '\/managementGroupDeploymentTemplate.json#$' {
                Write-Verbose 'Handling management group level validation' -Verbose
                $DeploymentInputs += @{
                  ManagementGroupId = "$(managementGroupId)"
                  Location          = '${{ parameters.location }}'
                } 
                Test-AzManagementGroupDeployment @DeploymentInputs
                break
              }
              '\/tenantDeploymentTemplate.json#$' {
                Write-Verbose 'Handling tenant level validation' -Verbose
                $DeploymentInputs += @{
                  Location = '${{ parameters.location }}'
                }
                Test-AzTenantDeployment @DeploymentInputs
                break
              }
              default {
                  throw "[$deploymentSchema] is a non-supported ARM template schema"
              }
          }
          if ($ValidationErrors) {
            Write-Error "Template is not valid."
          }