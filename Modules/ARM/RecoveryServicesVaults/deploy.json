{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"recoveryVaultName": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Required. Name of the Azure Recovery Service Vault"
			}
		},
		"location": {
			"type": "string",
			"defaultValue": "[resourceGroup().location]",
			"metadata": {
				"description": "Optional. Location for all resources."
			}
		},
		"backupPolicies": {
			"type": "array",
			"defaultValue": [
			],
			"metadata": {
				"description": "Optional. List of all backup policies."
			}
		},
		"protectionContainers": {
			"type": "array",
			"minLength": 0,
			"defaultValue": [
			],
			"metadata": {
				"description": "Optional. List of all protection containers."
			}
		},
		"diagnosticLogsRetentionInDays": {
			"type": "int",
			"defaultValue": 365,
			"minValue": 0,
			"maxValue": 365,
			"metadata": {
				"description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
			}
		},
		"diagnosticStorageAccountId": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Optional. Resource identifier of the Diagnostic Storage Account."
			}
		},
		"workspaceId": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Optional. Resource identifier of Log Analytics."
			}
		},
		"eventHubAuthorizationRuleId": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
			}
		},
		"eventHubName": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
			}
		},
		"lockForDeletion": {
			"type": "bool",
			"defaultValue": true,
			"metadata": {
				"description": "Optional. Switch to lock Recovery Service Vault from deletion."
			}
		},
		"tags": {
			"type": "object",
			"defaultValue": {
			},
			"metadata": {
				"description": "Optional. Tags of the Recovery Service Vault resource."
			}
		}
	},
	"variables": {
		"dummyProtectionContainers": {
			"name": "dummyValue"
		},
		"protectionContainers": "[if(greater(length(parameters('protectionContainers')),0),parameters('protectionContainers'), array(variables('dummyProtectionContainers')))]",
		"diagnosticsLogs": [
			{
				"category": "AzureBackupReport",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "CoreAzureBackup",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AddonAzureBackupJobs",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AddonAzureBackupAlerts",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AddonAzureBackupPolicy",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AddonAzureBackupStorage",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AddonAzureBackupProtectedInstance",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AzureSiteRecoveryJobs",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AzureSiteRecoveryEvents",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AzureSiteRecoveryReplicatedItems",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AzureSiteRecoveryReplicationStats",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AzureSiteRecoveryRecoveryPoints",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AzureSiteRecoveryReplicationDataUploadRate",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AzureSiteRecoveryProtectedDiskDataChurn",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			}
		]
	},
	"resources": [
		{
			"name": "[parameters('recoveryVaultName')]",
			"type": "Microsoft.RecoveryServices/vaults",
			"apiVersion": "2016-06-01",
			"location": "[parameters('location')]",
			"tags": "[parameters('tags')]",
			"sku": {
				"name": "RS0",
				"tier": "Standard"
			},
			"properties": {
			},
			"resources": [
				{
					"type": "providers/locks",
					"apiVersion": "2016-09-01",
					"condition": "[parameters('lockForDeletion')]",
					"name": "Microsoft.Authorization/recoveryServiceVaultDoNotDelete",
					"dependsOn": [
						"[concat('Microsoft.RecoveryServices/vaults/', parameters('recoveryVaultName'))]"
					],
					"comments": "Resource lock on Azure Recovery Service Vault",
					"properties": {
						"level": "CannotDelete"
					}
				},
				{
					"type": "Microsoft.RecoveryServices/vaults/providers/diagnosticsettings",
					"apiVersion": "2017-05-01-preview",
					"name": "[concat(parameters('recoveryVaultName'), '/Microsoft.Insights/service')]",
					"location": "[parameters('location')]",
					"condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
					"dependsOn": [
						"[concat('Microsoft.RecoveryServices/vaults/', parameters('recoveryVaultName'))]"
					],
					"properties": {
						"storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
						"workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
						"eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
						"eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
						"logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsLogs'))]"
					}
				}
			]
		},
		{
			"type": "Microsoft.RecoveryServices/vaults/backupPolicies",
			"condition": "[not(empty(parameters('backupPolicies')))]",
			"apiVersion": "2019-05-13",
			"name": "[if(empty(parameters('backupPolicies')), concat(parameters('recoveryVaultName'), '/', 'dummy'), concat(parameters('recoveryVaultName'), '/', parameters('backupPolicies')[copyIndex('backupPolicies')].name))]",
			"dependsOn": [
				"[concat('Microsoft.RecoveryServices/vaults/', parameters('recoveryVaultName'))]"
			],
			"location": "[parameters('location')]",
			"properties": "[parameters('backupPolicies')[copyIndex('backupPolicies')].properties]",
			"copy": {
				"name": "backupPolicies",
				"count": "[length(parameters('backupPolicies'))]"
			}
		},
		{
			"type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers",
			"condition": "[greater(length(parameters('protectionContainers')),0)]",
			"apiVersion": "2016-12-01",
			"name": "[concat(parameters('recoveryVaultName'), '/', if(not(empty(variables('protectionContainers')[copyIndex()].backupFabric)), variables('protectionContainers')[copyIndex()].backupFabric, 'Azure'),  '/' , variables('protectionContainers')[copyIndex()].name)]",
			"dependsOn": [
				"[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryVaultName'))]"
			],
			"copy": {
				"name": "protectionContainers",
				"count": "[length(variables('protectionContainers'))]"
			},
			"properties": {
				"sourceResourceId": "[variables('protectionContainers')[copyIndex()].sourceResourceId]",
				"friendlyName": "[variables('protectionContainers')[copyIndex()].friendlyName]",
				"backupManagementType": "[variables('protectionContainers')[copyIndex()].backupManagementType]",
				"containerType": "[variables('protectionContainers')[copyIndex()].containerType]"
			}
		}
	],
	"functions": [
	],
	"outputs": {
		"recoveryServicesVaultResourceId": {
			"type": "string",
			"value": "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryVaultName'))]",
			"metadata": {
				"description": "The Resource Id of the Recovery Services Vault."
			}
		},
		"recoveryServicesVaultResourceGroup": {
			"type": "string",
			"value": "[resourceGroup().name]",
			"metadata": {
				"description": "The Resource Group the Recovery Services Vault was deployed to."
			}
		},
		"recoveryServicesVaultName": {
			"type": "string",
			"value": "[parameters('recoveryVaultName')]",
			"metadata": {
				"description": "The Name of the Recovery Services Vault."
			}
		}
	}
}
