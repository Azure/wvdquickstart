{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "logicAppName": {
      "type": "string",
      "metadata": {
        "description": "The name of the logic app to create."
      }
    },
    "webhookURI": {
      "type": "string",
      "metadata": {
        "description": "Webhook URI of Logic App"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "recurrenceInterval": {
      "type": "int",
      "metadata": {
        "description": "Specifies the recurrence interval of the job in minutes"
      }
    },
    "actionSettingsBody": {
      "type": "object",
      "metadata": {
        "description": "Specifies the body in Action settings ('Note': Input should be in json format)"
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 365,
      "minValue": 0,
      "maxValue": 365,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource identifier of the Diagnostic Storage Account."
      }
    },
    "workspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource identifier of Log Analytics."
      }
    },
    "eventHubAuthorizationRuleId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
      }
    },
    "eventHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
      }
    },
    "lockForDeletion": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Switch to lock Logic App from deletion."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {
      },
      "metadata": {
        "description": "Optional. Tags of the Logic App resource."
      }
    }
  },
  "variables": {
    "diagnosticsMetrics": [
      {
        "category": "AllMetrics",
        "timeGrain": null,
        "enabled": true,
        "retentionPolicy": {
          "enabled": true,
          "days": "[parameters('diagnosticLogsRetentionInDays')]"
        }
      }
    ],
    "diagnosticsLogs": [
      {
        "category": "WorkflowRuntime",
        "enabled": true,
        "retentionPolicy": {
          "enabled": true,
          "days": "[parameters('diagnosticLogsRetentionInDays')]"
        }
      }
    ],
    "actionSettingsBody": {
      "value": {
        "subscriptionid": "[if(contains(parameters('actionSettingsBody'), 'subscriptionId'), parameters('actionSettingsBody').subscriptionId, subscription().subscriptionId)]",
        "AADTenantId": "[if(contains(parameters('actionSettingsBody'), 'AADTenantId'), parameters('actionSettingsBody').AADTenantId, subscription().tenantId)]",
        "HostPoolName": "[parameters('actionSettingsBody').hostpoolName]",
        "AutomationAccountName": "[parameters('actionSettingsBody').automationAccountName]",
        "ConnectionAssetName": "[if(contains(parameters('actionSettingsBody'), 'ConnectionAssetName'), parameters('actionSettingsBody').ConnectionAssetName, 'AzureRunAsConnection')]",
        "ResourceGroupName": "[if(contains(parameters('actionSettingsBody'), 'ResourceGroupName'), parameters('actionSettingsBody').ResourceGroupName, resourceGroup().name)]",
        "LimitSecondsToForceLogOffUser": "[parameters('actionSettingsBody').LimitSecondsToForceLogOffUser]",
        "EndPeakTime": "[parameters('actionSettingsBody').EndPeakTime]",
        "MaintenanceTagName": "[if(contains(parameters('actionSettingsBody'), 'MaintenanceTagName'), parameters('actionSettingsBody').MaintenanceTagName, 'optOutScaling')]",
        "BeginPeakTime": "[parameters('actionSettingsBody').BeginPeakTime]",
        "TimeDifference": "[parameters('actionSettingsBody').UtcOffset]",
        "LogOffMessageBody": "[parameters('actionSettingsBody').LogOffMessageBody]",
        "LogOffMessageTitle": "[parameters('actionSettingsBody').LogOffMessageTitle]",
        "MinimumNumberOfRDSH": "[parameters('actionSettingsBody').MinimumNumberOfRDSH]",
        "SessionThresholdPerCPU": "[parameters('actionSettingsBody').SessionThresholdPerCPU]"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[parameters('logicAppName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "HTTP_Webhook": {
              "inputs": {
                "subscribe": {
                  "body": "[variables('actionSettingsBody').value]",
                  "method": "POST",
                  "uri": "[parameters('webhookURI')]"
                },
                "unsubscribe": {
                }
              },
              "runAfter": {
              },
              "type": "HttpWebhook"
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {
          },
          "parameters": {
          },
          "triggers": {
            "Recurrence": {
              "recurrence": {
                "frequency": "Minute",
                "interval": "[parameters('recurrenceInterval')]"
              },
              "type": "Recurrence"
            }
          }
        }
      },
      "resources": [
        {
          "type": "Microsoft.Logic/workflows/providers/locks",
          "apiVersion": "2016-09-01",
          "condition": "[parameters('lockForDeletion')]",
          "name": "[concat(parameters('logicAppName'), '/Microsoft.Authorization/logicAppDoNotDelete')]",
          "dependsOn": [
            "[concat('Microsoft.Logic/workflows/', parameters('logicAppName'))]"
          ],
          "comments": "Resource lock on Logic App",
          "properties": {
            "level": "CannotDelete"
          }
        },
        {
          "type": "Microsoft.Logic/workflows/providers/diagnosticsettings",
          "apiVersion": "2017-05-01-preview",
          "name": "[concat(parameters('logicAppName'), '/Microsoft.Insights/service')]",
          "condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[concat('Microsoft.Logic/workflows/', parameters('logicAppName'))]"
          ],
          "properties": {
            "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
            "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
            "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
            "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
            "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsMetrics'))]",
            "logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsLogs'))]"
          }
        }
      ]
    }
  ],
  "functions": [
  ],
  "outputs": {
    "logicAppResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Logic/workflows', parameters('logicAppName'))]",
      "metadata": {
        "description": "The Resource Id of the Logic App."
      }
    },
    "logicAppResourceGroup": {
      "type": "string",
      "value": "[resourceGroup().name]",
      "metadata": {
        "description": "The Resource Group the Logic App was deployed to."
      }
    },
    "logicAppName": {
      "type": "string",
      "value": "[parameters('logicAppName')]",
      "metadata": {
        "description": "The Name of the Log App."
      }
    }
  }
}